⌜ # Computing specializations..  	 Time: 0:00:02[K✓ # Computing specializations..  	 Time: 0:00:02[K
┌ Info: Processing SEAIJRC Covid model
└ @ Main /home/demin/StructuralIdentifiability.jl/benchmarking/IdentifiableFunctions/run_single_benchmark.jl:40
┌ Info: Averaging over 1 runs.
│ Using keyword arguments:
│ NamedTuple{(:strategy,), Tuple{Tuple{Symbol, Int64}}}
│ (strategy = (:normalforms, 3),)
│ ID: (:normalforms, 3)
└ @ Main /home/demin/StructuralIdentifiability.jl/benchmarking/IdentifiableFunctions/run_single_benchmark.jl:41
┌ Info: Computing IO-equations
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/identifiable_functions.jl:160
┌ Info: IO-equations computed in 58.423973193 seconds
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/identifiable_functions.jl:162
⌜ # Computing specializations..  	 Time: 0:00:02[K✓ # Computing specializations..  	 Time: 0:00:02[K
⌜ # Computing specializations..  	 Time: 0:00:00[K⌝ # Computing specializations..  	 Time: 0:00:00[K⌟ # Computing specializations..  	 Time: 0:00:01[K⌞ # Computing specializations..  	 Time: 0:00:01[K⌜ # Computing specializations..  	 Time: 0:00:02[K⌝ # Computing specializations..  	 Time: 0:00:02[K⌟ # Computing specializations..  	 Time: 0:00:02[K⌞ # Computing specializations..  	 Time: 0:00:03[K⌜ # Computing specializations..  	 Time: 0:00:03[K⌝ # Computing specializations..  	 Time: 0:00:04[K⌟ # Computing specializations..  	 Time: 0:00:04[K⌞ # Computing specializations..  	 Time: 0:00:05[K⌜ # Computing specializations..  	 Time: 0:00:05[K⌝ # Computing specializations..  	 Time: 0:00:05[K⌟ # Computing specializations..  	 Time: 0:00:06[K⌞ # Computing specializations..  	 Time: 0:00:06[K⌜ # Computing specializations..  	 Time: 0:00:07[K⌝ # Computing specializations..  	 Time: 0:00:07[K⌟ # Computing specializations..  	 Time: 0:00:08[K⌞ # Computing specializations..  	 Time: 0:00:08[K⌜ # Computing specializations..  	 Time: 0:00:08[K⌝ # Computing specializations..  	 Time: 0:00:09[K⌟ # Computing specializations..  	 Time: 0:00:09[K⌞ # Computing specializations..  	 Time: 0:00:09[K⌜ # Computing specializations..  	 Time: 0:00:10[K✓ # Computing specializations..  	 Time: 0:00:10[K
⌜ # Computing specializations.. 	 Time: 0:00:00[K
  Points:  2[K[K[A⌝ # Computing specializations.. 	 Time: 0:00:00[K
  Points:  4[K[K[A⌟ # Computing specializations.. 	 Time: 0:00:01[K
  Points:  6[K[K[A⌞ # Computing specializations.. 	 Time: 0:00:01[K
  Points:  9[K[K[A⌜ # Computing specializations.. 	 Time: 0:00:02[K
  Points:  12[K[K[A⌝ # Computing specializations.. 	 Time: 0:00:02[K
  Points:  15[K[K[A⌟ # Computing specializations.. 	 Time: 0:00:02[K
  Points:  18[K[K[A⌞ # Computing specializations.. 	 Time: 0:00:03[K
  Points:  21[K[K[A⌜ # Computing specializations.. 	 Time: 0:00:03[K
  Points:  23[K[K[A⌝ # Computing specializations.. 	 Time: 0:00:03[K
  Points:  25[K[K[A⌟ # Computing specializations.. 	 Time: 0:00:04[K
  Points:  27[K[K[A⌞ # Computing specializations.. 	 Time: 0:00:04[K
  Points:  29[K[K[A⌜ # Computing specializations.. 	 Time: 0:00:05[K
  Points:  31[K[K[A✓ # Computing specializations.. 	 Time: 0:00:05[K
┌ Info: Simplifying identifiable functions
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:515
┌ Info: Computing parametric Groebner basis up to degrees (2, 2)
│ Ordering, input / target: degrevlex / InputOrdering
│ Rational interpolator: VanDerHoevenLecerf
│ Polynomial interpolator: PrimesBenOrTiwari
│ Estimate degrees: true
│ Assess correctness: false
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:63
┌ Info: Given 1465 functions in Rational Field(alpha, b, g2, k, g1, r, q)[y1, y2, y3, y4, y5, y6, y7, t]
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/groebnerstate.jl:25
┌ Info: Specializing at 3 points to guess the shape of the basis..
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:140
┌ Info: Specializing at random points to guess the total degrees in parameters..
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:189
┌ Info: Success! 66 points used.
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:273
┌ Info: The total degrees in the coefficients
│   state.param_degrees = [[(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (2, 1), (0, 0)], [(0, 0), (2, 4), (3, 9), (0, 0), (1, 2), (2, 7), (1, 5)], [(0, 0), (1, 5), (2, 1), (2, 5), (6, 3), (4, 2), (4, 6), (6, 7)]]
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:274
┌ Info: Interpolating the exponents in parameters..
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:284
┌ Info: Interpolating for degrees:
│ Numerator: 3, Denominator: 3
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:333
┌ Info: Success! 32 points used.
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:411
┌ Info: Basis exponents summary:
│     Maximal interpolated degrees are: 2 for num. and 2 for den.
│     Maximal number of interpolated terms are: 2 for num. and 2 for den.
│     
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:416
┌ Info: Recovering the coefficients..
└ @ ParamPunPam /home/demin/ParamPunPam.jl/src/groebner/paramgb.jl:424
┌ Info: Groebner basis computed in 19.095684836 seconds
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:321
┌ Info: Checking two-sided inclusion modulo a prime
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:326
┌ Info: Inclusion checked in 6.949897318 seconds. Result: true
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:336
┌ Info: The coefficients of the Groebner basis are presented by 11 rational functions
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:340
┌ Info: The pool of fractions:
│ -g1,
│ -k,
│ -g2,
│ -b,
│ -alpha,
│ (2*r)//(r*q - q),
│ (r*q - q)//r,
│ (-r*q + q)//r
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:225
┌ Info: Computing normal forms of monomials in 7 variables up to degree 3
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:425
┌ Info: Reducing the normal forms of 119 monomials over QQ
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:441
┌ Info: Generators from normal forms
│   generators = AbstractAlgebra.Generic.Frac{Nemo.fmpq_mpoly}[alpha, b, g2, k, g1, alpha^2, alpha*b, alpha*g2, alpha*k, alpha*g1, b^2, b*g2, b*k, b*g1, g2^2, g2*k, g2*g1, k^2, k*g1, g1^2, alpha^3, alpha^2*b, alpha^2*g2, alpha^2*k, alpha^2*g1, alpha*b^2, alpha*b*g2, alpha*b*k, alpha*b*g1, alpha*g2^2, alpha*g2*k, alpha*g2*g1, alpha*k^2, alpha*k*g1, alpha*g1^2, b^3, b^2*g2, b^2*k, b^2*g1, b*g2^2, b*g2*k, b*g2*g1, b*k^2, b*k*g1, b*g1^2, g2^3, g2^2*k, g2^2*g1, g2*k^2, g2*k*g1, g2*g1^2, k^3, k^2*g1, k*g1^2, g1^3]
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:444
┌ Info: Final cleaning and simplification of generators
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:568
┌ Info: The pool of fractions:
│ g1,
│ g1,
│ k,
│ k,
│ g2,
│ g2,
│ b,
│ b,
│ alpha,
│ alpha,
│ g1^2,
│ k*g1,
│ k^2,
│ g2*g1,
│ g2*k,
│ g2^2,
│ b*g1,
│ b*k,
│ b*g2,
│ b^2,
│ alpha*g1,
│ alpha*k,
│ alpha*g2,
│ alpha*b,
│ alpha^2,
│ g1^3,
│ k*g1^2,
│ k^2*g1,
│ k^3,
│ g2*g1^2,
│ g2*k*g1,
│ g2*k^2,
│ g2^2*g1,
│ g2^2*k,
│ g2^3,
│ b*g1^2,
│ b*k*g1,
│ b*k^2,
│ b*g2*g1,
│ b*g2*k,
│ b*g2^2,
│ b^2*g1,
│ b^2*k,
│ b^2*g2,
│ b^3,
│ alpha*g1^2,
│ alpha*k*g1,
│ alpha*k^2,
│ alpha*g2*g1,
│ alpha*g2*k,
│ alpha*g2^2,
│ alpha*b*g1,
│ alpha*b*k,
│ alpha*b*g2,
│ alpha*b^2,
│ alpha^2*g1,
│ alpha^2*k,
│ alpha^2*g2,
│ alpha^2*b,
│ alpha^3,
│ (2*r)//(r*q - q)
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:225
┌ Info: Checking inclusion with probability 0.99
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:571
┌ Info: Inclusion checked in 28.406255647 seconds. Result: true
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:575
┌ Info: Out of 1464 initial generators there are 6 indepdendent
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:580
┌ Info: The ranking of the new set of generators is 1751
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/RationalFunctionFields/RationalFunctionField.jl:583
┌ Info: The search for identifiable functions concluded in 117.69277411 seconds
└ @ StructuralIdentifiability /home/demin/StructuralIdentifiability.jl/src/identifiable_functions.jl:77
┌ Info: Identifiable functions are
│   funcs = AbstractAlgebra.Generic.Frac{Nemo.fmpq_mpoly}[g1, k, g2, b, alpha, (2*r)//(r*q - q)]
└ @ Main /home/demin/StructuralIdentifiability.jl/benchmarking/IdentifiableFunctions/run_single_benchmark.jl:53
